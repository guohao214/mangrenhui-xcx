'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var upload = require('../../common/upload.js');

exports.default = Page({
  data: {
    pet_class_id_index: '',
    sexs: ['公', '母'],
    babys: ['是', '否'],
    classs: [{
      key: 1,
      name: '加菲'
    }, {
      key: 2,
      name: '波斯'
    }],
    pet: {
      pet_pic_url: '',
      pet_pic: '',
      pet_name: '',
      pet_class_id: '',
      pet_class_name: '',
      pet_sex: '',
      pet_sex_id: '',
      pet_will_have_baby: '',
      pet_will_have_baby_id: '',
      birthday: ''
    },
    pet_id: 0,
    isEdit: false,
    pets: []
  },
  onLoad: function onLoad(options) {
    var _this = this;

    var pet_id = (options.id || 0) / 1 || 0;
    this.setData({
      pet_id: pet_id,
      isEdit: !!pet_id
    }, function () {
      return _this.getClasss();
    });
  },

  chooseImage: function chooseImage() {
    var _this2 = this;

    upload(getApp()).then(function (data) {
      // data = json.jsonDecode(data)
      if (data.status == 0) return getApp().showToast('上传失败,请重试');

      var pic = data.data.content;
      debugger;
      _this2.setData({
        'pet.pet_pic_url': pic.url,
        'pet.pet_pic': pic.pic
      });
    });
  },
  getClasss: function getClasss() {
    var _this3 = this;

    getApp().get('pet/getPetClass').then(function (data) {
      var classs = data.data.content.map(function (item) {
        return {
          key: item.pet_class_id / 1,
          name: item.pet_class_name
        };
      });

      _this3.setData({
        classs: classs
      });
    }).then(function () {
      return _this3.getDetail();
    });
  },
  getDetail: function getDetail() {
    var _this4 = this;

    var self = this;

    if (this.data.isEdit) {
      getApp().get('pet/one?pet_id=' + this.data.pet_id).then(function (data) {
        var pet = data.data.content;

        pet.pet_id = pet.pet_id / 1;
        pet.pet_will_have_baby_id = pet.pet_will_have_baby_id / 1;
        pet.pet_class_id = pet.pet_class_id / 1;
        pet.pet_sex_id = pet.pet_sex_id / 1;

        var pet_class_id_index = _this4.data.classs.findIndex(function (item) {
          return item.key == pet.pet_class_id;
        });

        self.setData({
          pet_class_id_index: pet_class_id_index,
          pet: pet
        });
      });
    }
  },


  onShow: function onShow() {
    // this.getPets()
  },

  bindChangeName: function bindChangeName(e) {
    var k = e.detail.value;
    this.setData({
      'pet.pet_name': k
    });
  },
  deletePet: function deletePet() {
    var dialogComponent = this.data.lastComponent = this.selectComponent('.wxc-cancel-pet');
    dialogComponent && dialogComponent.show();
  },
  cancelDeletePet: function cancelDeletePet() {
    var dialogComponent = this.data.lastComponent = this.selectComponent('.wxc-cancel-pet');
    dialogComponent && dialogComponent.hide();
  },
  confirmDeletePet: function confirmDeletePet() {
    getApp().post('pet/removePet', {
      pet_id: this.data.pet_id
    }).then(function (data) {
      wx.navigateBack();
    });
  },
  bindChangeClass: function bindChangeClass(e) {
    var k = e.detail.value;
    var v = this.data.classs[k];
    this.setData({
      'pet_class_id_index': k,
      'pet.pet_class_id': v['key'],
      'pet.pet_class_name': v['name']
    });
  },
  bindChangeSex: function bindChangeSex(e) {
    var k = e.detail.value;
    var v = this.data.sexs[k];
    this.setData({
      'pet.pet_sex': v,
      'pet.pet_sex_id': k
    });
  },
  bindChangeBaby: function bindChangeBaby(e) {
    var k = e.detail.value;
    var v = this.data.babys[k];
    this.setData({
      'pet.pet_will_have_baby': v,
      'pet.pet_will_have_baby_id': k
    });
  },
  bindChangeDate: function bindChangeDate(e) {
    var k = e.detail.value;
    this.setData({
      'pet.birthday': k
    });
  },
  addPet: function addPet() {
    var app = getApp();
    var url = 'pet/createPet';
    if (this.data.isEdit) url = 'pet/updatePet?pet_id=' + this.data.pet_id;

    var pet = this.data.pet;
    if (!pet.pet_name.trim()) {
      return app.showToast('请输入宠物昵称');
    }

    if (!pet.pet_class_id) {
      return app.showToast('请选择宠物种类');
    }

    if (!pet.pet_sex_id) {
      return app.showToast('请选择性别');
    }

    if (!pet.pet_will_have_baby_id) {
      return app.showToast('请选择宠物是否绝育');
    }

    if (!pet.birthday) {
      return app.showToast('请选择宠物生日');
    }

    app.post(url, this.data.pet).then(function (data) {
      wx.navigateBack();
    });
  },


  getPets: function getPets() {
    var _this5 = this;

    var app = getApp();
    app.get('pet/findMyPets').then(function (data) {
      var result = data.data;
      _this5.setData({
        pets: result.content
      });
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,