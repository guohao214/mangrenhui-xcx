'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Page({
  data: {
    '__code__': {
      readme: ''
    },

    toastText: '',
    showToast: false,
    shopList: [],
    cpShopList: [],
    showShopListPop: 'hide',
    currentShop: {},
    beauticianList: [],
    currentBeautician: {},
    projectList: [],
    currentProject: {},
    appointmentDayList: [],
    currentAppointmentDay: '',
    appointmentTimeList: [],
    currentAppointmentTimes: [] // 预约的时间
  },
  handlerSearch: function handlerSearch(event) {
    var value = event.detail.value;
    var shopList = this.data.shopList;
    var cpShopList = shopList.filter(function (item) {
      return item.shop_name.match(new RegExp(value));
    });

    this.setData({
      cpShopList: cpShopList
    });
  },
  showShopList: function showShopList() {
    this.setData({
      showShopListPop: 'show'
    });
  },
  chooseShop: function chooseShop(event) {
    var index = event.currentTarget.dataset.index;
    var currentShop = this.data.shopList[index];
    this.setData({
      currentShop: currentShop,
      showShopListPop: 'hide'
    });

    this.getBeauticianAndProject(currentShop.shop_id);
  },
  chooseProject: function chooseProject(event) {
    var index = event.currentTarget.dataset.index;
    var currentProject = this.data.projectList[index];
    this.setData({
      currentProject: currentProject
    });

    var timeList = this.data.appointmentTimeList;
    timeList.forEach(function (item) {
      return item.checked = false;
    });
    this.setData({
      currentAppointmentTimes: [],
      appointmentTimeList: timeList
    });
  },
  chooseBeautician: function chooseBeautician(event) {
    var index = event.currentTarget.dataset.index;
    var currentBeautician = this.data.beauticianList[index];
    if (currentBeautician.beautician_id === this.data.currentBeautician.beautician_id) return;

    this.setData({
      currentBeautician: currentBeautician
    });

    var beauticianId = currentBeautician.beautician_id;
    var day = this.data.currentAppointmentDay.day;
    this.getAppointmentTimes(beauticianId, day);
  },
  chooseDay: function chooseDay(event) {
    var index = event.currentTarget.dataset.index;
    var currentAppointmentDay = this.data.appointmentDayList[index];

    if (currentAppointmentDay.day === this.data.currentAppointmentDay.day) return;

    this.setData({
      currentAppointmentDay: currentAppointmentDay
    });

    var beauticianId = this.data.currentBeautician.beautician_id;
    var day = currentAppointmentDay.day;
    this.getAppointmentTimes(beauticianId, day);
  },
  _toast: function _toast(text) {
    wx.showToast({
      title: text,
      duration: 2000,
      icon: 'none'
    });
  },

  chooseTime: function chooseTime(event) {
    var everyTime = 30;
    var index = event.currentTarget.dataset.index;
    var time = this.data.appointmentTimeList[index];
    if (!time.valid) return false;

    var timeList = this.data.appointmentTimeList;
    timeList.forEach(function (item) {
      return item.checked = false;
    });

    var projectUseTime = this.data.currentProject.use_time;
    var useTimeNum = Math.ceil(projectUseTime / everyTime);
    var timeListLength = this.data.appointmentTimeList.length;
    if (index + useTimeNum > timeListLength) {
      this.setData({
        currentAppointmentTimes: [],
        appointmentTimeList: timeList
      });

      this._toast('预约时间不足');

      return;
    }
    var start = 0;
    var useTime = [];
    while (start < useTimeNum) {
      var item = timeList[index + start++];
      if (!item.valid) {
        timeList.forEach(function (item) {
          return item.checked = false;
        });
        useTime = [];
        this.setData({
          currentAppointmentTimes: useTime,
          appointmentTimeList: timeList
        });
        this._toast('预约时间不足');
        break;
      }
      item.checked = true;
      useTime.push(item.time);
    }

    this.setData({
      currentAppointmentTimes: useTime,
      appointmentTimeList: timeList
    });
  },
  getBeauticianAndProject: function getBeauticianAndProject(shopId) {
    var app = getApp();
    var self = this;
    app.get('appointment/getBeauticianAndProject/' + shopId).then(function (data) {
      var content = data.data && data.data.content || {};

      content.days = content.days.map(function (item) {
        var day = item.split('#');
        return {
          date: day[0],
          week: day[1],
          day: day[2]
        };
      });

      var currentProject = content.projects[0] || {};
      var currentBeautician = content.beauticians[0] || {};
      var currentAppointmentDay = content.days[0] || {};

      self.setData({
        beauticianList: content.beauticians,
        projectList: content.projects,
        appointmentDayList: content.days,
        currentProject: currentProject,
        currentBeautician: currentBeautician,
        currentAppointmentDay: currentAppointmentDay
      });

      self.getAppointmentTimes(currentBeautician.beautician_id, currentAppointmentDay.day);
    }).catch(function (e) {
      console.log(e);
    });
  },
  getAppointmentTimes: function getAppointmentTimes(beauticianId, day) {
    var app = getApp();
    var self = this;
    this.setData({
      currentAppointmentTimes: []
    });

    app.get('appointment/getAppointmentTime/' + beauticianId + '/' + day).then(function (data) {
      var content = data.data && data.data.content || [];
      // for (var i in [0, 0, 0, 0])
      //   content.push({})

      self.setData({
        appointmentTimeList: content
      });
    });
  },
  appointment: function appointment(event) {
    var _this = this;

    var app = getApp();
    var formId = event.detail.formId;

    // 预约
    var data = {
      shop_id: this.data.currentShop.shop_id,
      beautician_id: this.data.currentBeautician.beautician_id,
      project_id: this.data.currentProject.project_id,
      appointment_day: this.data.currentAppointmentDay.day,
      appointment_time: this.data.currentAppointmentTimes.join(','),
      from: 'xcx',
      formId: formId
    };
    app.post('cart/appointment', data).then(function () {
      _this._toast('预约成功!');
      setTimeout(function (x) {
        return _this.getAppointmentTimes(data.beautician_id, data.appointment_day);
      }, 1000);
    }).catch(function (error) {
      _this._toast(error.detail || '预约失败!');
    });
  },
  onShow: function onShow() {
    var app = getApp();
    var self = this;

    wx.getLocation({
      success: function success(data) {
        app.get('shop/getList', { latitude: data.latitude, longitude: data.longitude }).then(function (data) {
          var result = data.data;
          var currentShop = result.content[0] || {};
          self.setData({
            shopList: result.content,
            cpShopList: result.content,
            currentShop: result.content[0] || []
          });

          if (currentShop) self.getBeauticianAndProject(currentShop.shop_id);
        }).catch(function (e) {
          return console.log(e);
        });
      },
      fail: function fail() {
        wx.openSetting({
          success: function success(res) {},
          fail: function fail() {}
        });
      }
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4Lnd4cCJdLCJuYW1lcyI6WyJkYXRhIiwidG9hc3RUZXh0Iiwic2hvd1RvYXN0Iiwic2hvcExpc3QiLCJjcFNob3BMaXN0Iiwic2hvd1Nob3BMaXN0UG9wIiwiY3VycmVudFNob3AiLCJiZWF1dGljaWFuTGlzdCIsImN1cnJlbnRCZWF1dGljaWFuIiwicHJvamVjdExpc3QiLCJjdXJyZW50UHJvamVjdCIsImFwcG9pbnRtZW50RGF5TGlzdCIsImN1cnJlbnRBcHBvaW50bWVudERheSIsImFwcG9pbnRtZW50VGltZUxpc3QiLCJjdXJyZW50QXBwb2ludG1lbnRUaW1lcyIsImhhbmRsZXJTZWFyY2giLCJldmVudCIsInZhbHVlIiwiZGV0YWlsIiwiZmlsdGVyIiwiaXRlbSIsInNob3BfbmFtZSIsIm1hdGNoIiwiUmVnRXhwIiwic2V0RGF0YSIsInNob3dTaG9wTGlzdCIsImNob29zZVNob3AiLCJpbmRleCIsImN1cnJlbnRUYXJnZXQiLCJkYXRhc2V0IiwiZ2V0QmVhdXRpY2lhbkFuZFByb2plY3QiLCJzaG9wX2lkIiwiY2hvb3NlUHJvamVjdCIsInRpbWVMaXN0IiwiZm9yRWFjaCIsImNoZWNrZWQiLCJjaG9vc2VCZWF1dGljaWFuIiwiYmVhdXRpY2lhbl9pZCIsImJlYXV0aWNpYW5JZCIsImRheSIsImdldEFwcG9pbnRtZW50VGltZXMiLCJjaG9vc2VEYXkiLCJfdG9hc3QiLCJ0ZXh0Iiwid3giLCJ0aXRsZSIsImR1cmF0aW9uIiwiaWNvbiIsImNob29zZVRpbWUiLCJldmVyeVRpbWUiLCJ0aW1lIiwidmFsaWQiLCJwcm9qZWN0VXNlVGltZSIsInVzZV90aW1lIiwidXNlVGltZU51bSIsIk1hdGgiLCJjZWlsIiwidGltZUxpc3RMZW5ndGgiLCJsZW5ndGgiLCJzdGFydCIsInVzZVRpbWUiLCJwdXNoIiwic2hvcElkIiwiYXBwIiwiZ2V0QXBwIiwic2VsZiIsImdldCIsInRoZW4iLCJjb250ZW50IiwiZGF5cyIsIm1hcCIsInNwbGl0IiwiZGF0ZSIsIndlZWsiLCJwcm9qZWN0cyIsImJlYXV0aWNpYW5zIiwiY2F0Y2giLCJjb25zb2xlIiwibG9nIiwiZSIsImFwcG9pbnRtZW50IiwiZm9ybUlkIiwicHJvamVjdF9pZCIsImFwcG9pbnRtZW50X2RheSIsImFwcG9pbnRtZW50X3RpbWUiLCJqb2luIiwiZnJvbSIsInBvc3QiLCJzZXRUaW1lb3V0IiwiZXJyb3IiLCJvblNob3ciLCJnZXRMb2NhdGlvbiIsInN1Y2Nlc3MiLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsInJlc3VsdCIsImZhaWwiLCJvcGVuU2V0dGluZyIsInJlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBWUlBLFFBQU07QUFBQTtBQUFBO0FBQUE7O0FBQ0pDLGVBQVcsRUFEUDtBQUVKQyxlQUFXLEtBRlA7QUFHSkMsY0FBVSxFQUhOO0FBSUpDLGdCQUFZLEVBSlI7QUFLSkMscUJBQWlCLE1BTGI7QUFNSkMsaUJBQWEsRUFOVDtBQU9KQyxvQkFBZ0IsRUFQWjtBQVFKQyx1QkFBbUIsRUFSZjtBQVNKQyxpQkFBYSxFQVRUO0FBVUpDLG9CQUFnQixFQVZaO0FBV0pDLHdCQUFvQixFQVhoQjtBQVlKQywyQkFBdUIsRUFabkI7QUFhSkMseUJBQXFCLEVBYmpCO0FBY0pDLDZCQUF5QixFQWRyQixDQWN5QjtBQWR6QixHO0FBZ0JOQyxpQkFBZSx1QkFBVUMsS0FBVixFQUFpQjtBQUM5QixRQUFJQyxRQUFRRCxNQUFNRSxNQUFOLENBQWFELEtBQXpCO0FBQ0EsUUFBSWQsV0FBVyxLQUFLSCxJQUFMLENBQVVHLFFBQXpCO0FBQ0EsUUFBSUMsYUFBYUQsU0FBU2dCLE1BQVQsQ0FBZ0IsVUFBVUMsSUFBVixFQUFnQjtBQUMvQyxhQUFPQSxLQUFLQyxTQUFMLENBQWVDLEtBQWYsQ0FBcUIsSUFBSUMsTUFBSixDQUFXTixLQUFYLENBQXJCLENBQVA7QUFDRCxLQUZnQixDQUFqQjs7QUFJQSxTQUFLTyxPQUFMLENBQWE7QUFDWHBCLGtCQUFZQTtBQURELEtBQWI7QUFHRCxHO0FBQ0RxQixnQkFBYyx3QkFBWTtB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Q3ZCLENBRlk7QUFHYkYsZ0JBQU0sZ0JBQVksQ0FDakI7QUFKWSxTQUFmO0FBTUQ7QUF0QlksS0FBZjtBQXdCRCIsImZpbGUiOiJpbmRleC53eHAiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gICAgY29uZmlnOiB7XG4gICAgICBuYXZpZ2F0aW9uQmFyVGl0bGVUZXh0OiAn6aKE57qmJyxcbiAgICAgIHVzaW5nQ29tcG9uZW50czoge1xuICAgICAgICAnd3hjLWZsZXgnOiAnQG1pbnVpL3d4Yy1mbGV4JyxcbiAgICAgICAgJ3d4Yy1pY29uJzogJ0BtaW51aS93eGMtaWNvbicsXG4gICAgICAgICd3eGMtYXZhdGFyJzogJ0BtaW51aS93eGMtYXZhdGFyJyxcbiAgICAgICAgJ3d4Yy1tYXNrJzogJ0BtaW51aS93eGMtbWFzaycsXG4gICAgICAgICd3eGMtcG9wdXAnOiAnQG1pbnVpL3d4Yy1wb3B1cCcsXG4gICAgICAgICd3eGMtZWxpcCc6ICdAbWludWkvd3hjLWVsaXAnLFxuICAgICAgfVxuICAgIH0sXG4gICAgZGF0YToge1xuICAgICAgdG9hc3RUZXh0OiAnJyxcbiAgICAgIHNob3dUb2FzdDogZmFsc2UsXG4gICAgICBzaG9wTGlzdDogW10sXG4gICAgICBjcFNob3BMaXN0OiBbXSxcbiAgICAgIHNob3dTaG9wTGlzdFBvcDogJ2hpZGUnLFxuICAgICAgY3VycmVudFNob3A6IHt9LFxuICAgICAgYmVhdXRpY2lhbkxpc3Q6IFtdLFxuICAgICAgY3VycmVudEJlYXV0aWNpYW46IHt9LFxuICAgICAgcHJvamVjdExpc3Q6IFtdLFxuICAgICAgY3VycmVudFByb2plY3Q6IHt9LFxuICAgICAgYXBwb2ludG1lbnREYXlMaXN0OiBbXSxcbiAgICAgIGN1cnJlbnRBcHBvaW50bWVudERheTogJycsXG4gICAgICBhcHBvaW50bWVudFRpbWVMaXN0OiBbXSxcbiAgICAgIGN1cnJlbnRBcHBvaW50bWVudFRpbWVzOiBbXSwgLy8g6aKE57qm55qE5pe26Ze0XG4gICAgfSxcbiAgICBoYW5kbGVyU2VhcmNoOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGxldCB2YWx1ZSA9IGV2ZW50LmRldGFpbC52YWx1ZVxuICAgICAgbGV0IHNob3BMaXN0ID0gdGhpcy5kYXRhLnNob3BMaXN0XG4gICAgICBsZXQgY3BTaG9wTGlzdCA9IHNob3BMaXN0LmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbS5zaG9wX25hbWUubWF0Y2gobmV3IFJlZ0V4cCh2YWx1ZSkpXG4gICAgICB9KVxuXG4gICAgICB0aGlzLnNldERhdGEoe1xuICAgICAgICBjcFNob3BMaXN0OiBjcFNob3BMaXN0XG4gICAgICB9KVxuICAgIH0sXG4gICAgc2hvd1Nob3BMaXN0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnNldERhdGEoe1xuICAgICAgICBzaG93U2hvcExpc3RQb3A6ICdzaG93J1xuICAgICAgfSlcbiAgICB9LFxuICAgIGNob29zZVNob3A6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgbGV0IGluZGV4ID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmluZGV4XG4gICAgICBsZXQgY3VycmVudFNob3AgPSB0aGlzLmRhdGEuc2hvcExpc3RbaW5kZXhdXG4gICAgICB0aGlzLnNldERhdGEoe1xuICAgICAgICBjdXJyZW50U2hvcDogY3VycmVudFNob3AsXG4gICAgICAgIHNob3dTaG9wTGlzdFBvcDogJ2hpZGUnXG4gICAgICB9KVxuXG4gICAgICB0aGlzLmdldEJlYXV0aWNpYW5BbmRQcm9qZWN0KGN1cnJlbnRTaG9wLnNob3BfaWQpXG4gICAgfSxcbiAgICBjaG9vc2VQcm9qZWN0OiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGxldCBpbmRleCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5pbmRleFxuICAgICAgbGV0IGN1cnJlbnRQcm9qZWN0ID0gdGhpcy5kYXRhLnByb2plY3RMaXN0W2luZGV4XVxuICAgICAgdGhpcy5zZXREYXRhKHtcbiAgICAgICAgY3VycmVudFByb2plY3Q6IGN1cnJlbnRQcm9qZWN0LFxuICAgICAgfSlcblxuICAgICAgbGV0IHRpbWVMaXN0ID0gdGhpcy5kYXRhLmFwcG9pbnRtZW50VGltZUxpc3RcbiAgICAgIHRpbWVMaXN0LmZvckVhY2goaXRlbSA9PiBpdGVtLmNoZWNrZWQgPSBmYWxzZSlcbiAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgIGN1cnJlbnRBcHBvaW50bWVudFRpbWVzOiBbXSxcbiAgICAgICAgYXBwb2ludG1lbnRUaW1lTGlzdDogdGltZUxpc3RcbiAgICAgIH0pXG4gICAgfSxcbiAgICBjaG9vc2VCZWF1dGljaWFuOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGxldCBpbmRleCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5pbmRleFxuICAgICAgbGV0IGN1cnJlbnRCZWF1dGljaWFuID0gdGhpcy5kYXRhLmJlYXV0aWNpYW5MaXN0W2luZGV4XVxuICAgICAgaWYgKGN1cnJlbnRCZWF1dGljaWFuLmJlYXV0aWNpYW5faWQgPT09IHRoaXMuZGF0YS5jdXJyZW50QmVhdXRpY2lhbi5iZWF1dGljaWFuX2lkKVxuICAgICAgICByZXR1cm5cblxuICAgICAgdGhpcy5zZXREYXRhKHtcbiAgICAgICAgY3VycmVudEJlYXV0aWNpYW46IGN1cnJlbnRCZWF1dGljaWFuLFxuICAgICAgfSlcblxuICAgICAgbGV0IGJlYXV0aWNpYW5JZCA9IGN1cnJlbnRCZWF1dGljaWFuLmJlYXV0aWNpYW5faWRcbiAgICAgIGxldCBkYXkgPSB0aGlzLmRhdGEuY3VycmVudEFwcG9pbnRtZW50RGF5LmRheVxuICAgICAgdGhpcy5nZXRBcHBvaW50bWVudFRpbWVzKGJlYXV0aWNpYW5JZCwgZGF5KVxuICAgIH0sXG4gICAgY2hvb3NlRGF5OiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGxldCBpbmRleCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5pbmRleFxuICAgICAgbGV0IGN1cnJlbnRBcHBvaW50bWVudERheSA9IHRoaXMuZGF0YS5hcHBvaW50bWVudERheUxpc3RbaW5kZXhdXG5cbiAgICAgIGlmIChjdXJyZW50QXBwb2ludG1lbnREYXkuZGF5ID09PSB0aGlzLmRhdGEuY3VycmVudEFwcG9pbnRtZW50RGF5LmRheSlcbiAgICAgICAgcmV0dXJuXG5cbiAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgIGN1cnJlbnRBcHBvaW50bWVudERheTogY3VycmVudEFwcG9pbnRtZW50RGF5LFxuICAgICAgfSlcblxuICAgICAgbGV0IGJlYXV0aWNpYW5JZCA9IHRoaXMuZGF0YS5jdXJyZW50QmVhdXRpY2lhbi5iZWF1dGljaWFuX2lkXG4gICAgICBsZXQgZGF5ID0gY3VycmVudEFwcG9pbnRtZW50RGF5LmRheVxuICAgICAgdGhpcy5nZXRBcHBvaW50bWVudFRpbWVzKGJlYXV0aWNpYW5JZCwgZGF5KVxuICAgIH0sXG4gICAgX3RvYXN0KHRleHQpIHtcbiAgICAgIHd4LnNob3dUb2FzdCh7XG4gICAgICAgIHRpdGxlOiB0ZXh0LFxuICAgICAgICBkdXJhdGlvbjogMjAwMCxcbiAgICAgICAgaWNvbjogJ25vbmUnXG4gICAgICB9KVxuICAgIH0sXG4gICAgY2hvb3NlVGltZTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBsZXQgZXZlcnlUaW1lID0gMzBcbiAgICAgIGxldCBpbmRleCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5pbmRleFxuICAgICAgbGV0IHRpbWUgPSB0aGlzLmRhdGEuYXBwb2ludG1lbnRUaW1lTGlzdFtpbmRleF1cbiAgICAgIGlmICghdGltZS52YWxpZClcbiAgICAgICAgcmV0dXJuIGZhbHNlXG5cbiAgICAgIGxldCB0aW1lTGlzdCA9IHRoaXMuZGF0YS5hcHBvaW50bWVudFRpbWVMaXN0XG4gICAgICB0aW1lTGlzdC5mb3JFYWNoKGl0ZW0gPT4gaXRlbS5jaGVja2VkID0gZmFsc2UpXG5cbiAgICAgIGxldCBwcm9qZWN0VXNlVGltZSA9IHRoaXMuZGF0YS5jdXJyZW50UHJvamVjdC51c2VfdGltZVxuICAgICAgbGV0IHVzZVRpbWVOdW0gPSBNYXRoLmNlaWwocHJvamVjdFVzZVRpbWUgLyBldmVyeVRpbWUpXG4gICAgICBsZXQgdGltZUxpc3RMZW5ndGggPSB0aGlzLmRhdGEuYXBwb2ludG1lbnRUaW1lTGlzdC5sZW5ndGhcbiAgICAgIGlmIChpbmRleCArIHVzZVRpbWVOdW0gPiB0aW1lTGlzdExlbmd0aCkge1xuICAgICAgICB0aGlzLnNldERhdGEoe1xuICAgICAgICAgIGN1cnJlbnRBcHBvaW50bWVudFRpbWVzOiBbXSxcbiAgICAgICAgICBhcHBvaW50bWVudFRpbWVMaXN0OiB0aW1lTGlzdCxcbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLl90b2FzdCgn6aKE57qm5pe26Ze05LiN6LazJylcblxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGxldCBzdGFydCA9IDBcbiAgICAgIGxldCB1c2VUaW1lID0gW11cbiAgICAgIHdoaWxlIChzdGFydCA8IHVzZVRpbWVOdW0pIHtcbiAgICAgICAgbGV0IGl0ZW0gPSB0aW1lTGlzdFtpbmRleCArIHN0YXJ0KytdXG4gICAgICAgIGlmKCFpdGVtLnZhbGlkKSB7XG4gICAgICAgICAgdGltZUxpc3QuZm9yRWFjaChpdGVtID0+IGl0ZW0uY2hlY2tlZCA9IGZhbHNlKVxuICAgICAgICAgIHVzZVRpbWUgPSBbXVxuICAgICAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgICAgICBjdXJyZW50QXBwb2ludG1lbnRUaW1lczogdXNlVGltZSxcbiAgICAgICAgICAgIGFwcG9pbnRtZW50VGltZUxpc3Q6IHRpbWVMaXN0LFxuICAgICAgICAgIH0pXG4gICAgICAgICAgdGhpcy5fdG9hc3QoJ+mihOe6puaXtumXtOS4jei2sycpXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaXRlbS5jaGVja2VkID0gdHJ1ZVxuICAgICAgICB1c2VUaW1lLnB1c2goaXRlbS50aW1lKVxuICAgICAgfVxuXG4gICAgICB0aGlzLnNldERhdGEoe1xuICAgICAgICBjdXJyZW50QXBwb2ludG1lbnRUaW1lczogdXNlVGltZSxcbiAgICAgICAgYXBwb2ludG1lbnRUaW1lTGlzdDogdGltZUxpc3RcbiAgICAgIH0pXG5cbiAgICB9LFxuICAgIGdldEJlYXV0aWNpYW5BbmRQcm9qZWN0OiBmdW5jdGlvbiAoc2hvcElkKSB7XG4gICAgICBsZXQgYXBwID0gZ2V0QXBwKClcbiAgICAgIGxldCBzZWxmID0gdGhpc1xuICAgICAgYXBwLmdldChgYXBwb2ludG1lbnQvZ2V0QmVhdXRpY2lhbkFuZFByb2plY3QvJHtzaG9wSWR9YCkudGhlbihkYXRhID0+IHtcbiAgICAgICAgbGV0IGNvbnRlbnQgPSAoZGF0YS5kYXRhICYmIGRhdGEuZGF0YS5jb250ZW50KSB8fCB7fVxuXG4gICAgICAgIGNvbnRlbnQuZGF5cyA9IGNvbnRlbnQuZGF5cy5tYXAoaXRlbSA9PiB7XG4gICAgICAgICAgbGV0IGRheSA9IGl0ZW0uc3BsaXQoJyMnKVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRlOiBkYXlbMF0sXG4gICAgICAgICAgICB3ZWVrOiBkYXlbMV0sXG4gICAgICAgICAgICBkYXk6IGRheVsyXVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICBsZXQgY3VycmVudFByb2plY3QgPSBjb250ZW50LnByb2plY3RzWzBdIHx8IHt9XG4gICAgICAgIGxldCBjdXJyZW50QmVhdXRpY2lhbiA9IGNvbnRlbnQuYmVhdXRpY2lhbnNbMF0gfHwge31cbiAgICAgICAgbGV0IGN1cnJlbnRBcHBvaW50bWVudERheSA9IGNvbnRlbnQuZGF5c1swXSB8fCB7fVxuXG4gICAgICAgIHNlbGYuc2V0RGF0YSh7XG4gICAgICAgICAgYmVhdXRpY2lhbkxpc3Q6IGNvbnRlbnQuYmVhdXRpY2lhbnMsXG4gICAgICAgICAgcHJvamVjdExpc3Q6IGNvbnRlbnQucHJvamVjdHMsXG4gICAgICAgICAgYXBwb2ludG1lbnREYXlMaXN0OiBjb250ZW50LmRheXMsXG4gICAgICAgICAgY3VycmVudFByb2plY3QsXG4gICAgICAgICAgY3VycmVudEJlYXV0aWNpYW4sXG4gICAgICAgICAgY3VycmVudEFwcG9pbnRtZW50RGF5LFxuICAgICAgICB9KVxuXG4gICAgICAgIHNlbGYuZ2V0QXBwb2ludG1lbnRUaW1lcyhjdXJyZW50QmVhdXRpY2lhbi5iZWF1dGljaWFuX2lkLCBjdXJyZW50QXBwb2ludG1lbnREYXkuZGF5KVxuICAgICAgfSkuY2F0Y2goZSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGUpXG4gICAgICB9KVxuXG4gICAgfSxcbiAgICBnZXRBcHBvaW50bWVudFRpbWVzOiBmdW5jdGlvbiAoYmVhdXRpY2lhbklkLCBkYXkpIHtcbiAgICAgIGxldCBhcHAgPSBnZXRBcHAoKVxuICAgICAgbGV0IHNlbGYgPSB0aGlzXG4gICAgICB0aGlzLnNldERhdGEoe1xuICAgICAgICBjdXJyZW50QXBwb2ludG1lbnRUaW1lczogW11cbiAgICAgIH0pXG5cbiAgICAgIGFwcC5nZXQoJ2FwcG9pbnRtZW50L2dldEFwcG9pbnRtZW50VGltZS8nICsgYmVhdXRpY2lhbklkICsgJy8nICsgZGF5KVxuICAgICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgIGxldCBjb250ZW50ID0gKGRhdGEuZGF0YSAmJiBkYXRhLmRhdGEuY29udGVudCkgfHwgW11cbiAgICAgICAgICAvLyBmb3IgKHZhciBpIGluIFswLCAwLCAwLCAwXSlcbiAgICAgICAgICAvLyAgIGNvbnRlbnQucHVzaCh7fSlcblxuICAgICAgICAgIHNlbGYuc2V0RGF0YSh7XG4gICAgICAgICAgICBhcHBvaW50bWVudFRpbWVMaXN0OiBjb250ZW50XG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9LFxuICAgIGFwcG9pbnRtZW50OiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGxldCBhcHAgPSBnZXRBcHAoKVxuICAgICAgbGV0IGZvcm1JZCA9IGV2ZW50LmRldGFpbC5mb3JtSWRcblxuICAgICAgLy8g6aKE57qmXG4gICAgICBsZXQgZGF0YSA9IHtcbiAgICAgICAgc2hvcF9pZDogdGhpcy5kYXRhLmN1cnJlbnRTaG9wLnNob3BfaWQsXG4gICAgICAgIGJlYXV0aWNpYW5faWQ6IHRoaXMuZGF0YS5jdXJyZW50QmVhdXRpY2lhbi5iZWF1dGljaWFuX2lkLFxuICAgICAgICBwcm9qZWN0X2lkOiB0aGlzLmRhdGEuY3VycmVudFByb2plY3QucHJvamVjdF9pZCxcbiAgICAgICAgYXBwb2ludG1lbnRfZGF5OiB0aGlzLmRhdGEuY3VycmVudEFwcG9pbnRtZW50RGF5LmRheSxcbiAgICAgICAgYXBwb2ludG1lbnRfdGltZTogdGhpcy5kYXRhLmN1cnJlbnRBcHBvaW50bWVudFRpbWVzLmpvaW4oJywnKSxcbiAgICAgICAgZnJvbTogJ3hjeCcsXG4gICAgICAgIGZvcm1JZDogZm9ybUlkLFxuICAgICAgfVxuICAgICAgYXBwLnBvc3QoJ2NhcnQvYXBwb2ludG1lbnQnLCBkYXRhKVxuICAgICAgICAudGhlbigoKSA9PiAgIHtcbiAgICAgICAgICB0aGlzLl90b2FzdCgn6aKE57qm5oiQ5YqfIScpXG4gICAgICAgICAgc2V0VGltZW91dCh4ID0+IHRoaXMuZ2V0QXBwb2ludG1lbnRUaW1lcyhkYXRhLmJlYXV0aWNpYW5faWQsIGRhdGEuYXBwb2ludG1lbnRfZGF5KSwgMTAwMClcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICB0aGlzLl90b2FzdChlcnJvci5kZXRhaWwgfHwgJ+mihOe6puWksei0pSEnKVxuICAgICAgICB9KVxuICAgIH0sXG4gICAgb25TaG93OiBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgYXBwID0gZ2V0QXBwKClcbiAgICAgIGxldCBzZWxmID0gdGhpc1xuXG4gICAgICB3eC5nZXRMb2NhdGlvbih7XG4gICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgYXBwLmdldCgnc2hvcC9nZXRMaXN0Jywge2xhdGl0dWRlOiBkYXRhLmxhdGl0dWRlLCBsb25naXR1ZGU6IGRhdGEubG9uZ2l0dWRlfSkudGhlbihkYXRhID0+IHtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSBkYXRhLmRhdGFcbiAgICAgICAgICAgIGxldCBjdXJyZW50U2hvcCA9IHJlc3VsdC5jb250ZW50WzBdIHx8IHt9XG4gICAgICAgICAgICBzZWxmLnNldERhdGEoe1xuICAgICAgICAgICAgICBzaG9wTGlzdDogcmVzdWx0LmNvbnRlbnQsXG4gICAgICAgICAgICAgIGNwU2hvcExpc3Q6IHJlc3VsdC5jb250ZW50LFxuICAgICAgICAgICAgICBjdXJyZW50U2hvcDogcmVzdWx0LmNvbnRlbnRbMF0gfHwgW11cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIGlmIChjdXJyZW50U2hvcClcbiAgICAgICAgICAgICAgc2VsZi5nZXRCZWF1dGljaWFuQW5kUHJvamVjdChjdXJyZW50U2hvcC5zaG9wX2lkKVxuICAgICAgICAgIH0pLmNhdGNoKGUgPT4gY29uc29sZS5sb2coZSkpXG4gICAgICAgIH0sXG4gICAgICAgIGZhaWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB3eC5vcGVuU2V0dGluZyh7XG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmFpbDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9Il19