'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = App({
  globalData: {
    baseUrl: 'https://www.mlxiaowu.com/'
    // baseUrl : 'http://localhost/',
  },
  login: function login() {
    var self = this;
    wx.login({
      success: function success(data) {
        self.get('xcxLogin/authorize', { code: data.code }).then(function (data) {
          wx.setStorageSync('session_id', data.data);
        });
      }
    });
  },
  onLaunch: function onLaunch() {
    this.login();
  },
  onShow: function onShow() {},
  onHide: function onHide() {},

  request: function request(method, url, data) {
    var _this = this;

    return new Promise(function (res, rej) {
      wx.showLoading({
        title: '加载中...'
      });
      wx.request({
        method: method,
        header: {
          'x-requested-with': 'xmlhttprequest',
          "Content-Type": "application/x-www-form-urlencoded",
          'x-xcx': 'xcx',
          'token': wx.getStorageSync('session_id')
        },
        url: _this.globalData.baseUrl + url,
        data: data,
        success: function success(result) {
          var data = result.data;
          if (data.status == 1) res(result.data);else if (data.status == -999) {
            // 跳转到绑定页
            wx.navigateTo({
              url: '/pages/bind/index'
            });
          } else {
            rej(data);
          }
        },
        fail: function fail(error) {
          return rej(error);
        },
        complete: function complete() {
          setTimeout(function () {
            return wx.hideLoading();
          }, 500);
        }
      });
    });
  },
  get: function get(url) {
    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    return this.request('GET', url, data);
  },
  post: function post(url, data) {
    return this.request('POST', url, data);
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC53eGEiXSwibmFtZXMiOlsiZ2xvYmFsRGF0YSIsImJhc2VVcmwiLCJsb2dpbiIsInNlbGYiLCJ3eCIsInN1Y2Nlc3MiLCJkYXRhIiwiZ2V0IiwiY29kZSIsInRoZW4iLCJzZXRTdG9yYWdlU3luYyIsIm9uTGF1bmNoIiwib25TaG93Iiwib25IaWRlIiwicmVxdWVzdCIsIm1ldGhvZCIsInVybCIsIlByb21pc2UiLCJyZXMiLCJyZWoiLCJzaG93TG9hZGluZyIsInRpdGxlIiwiaGVhZGVyIiwiZ2V0U3RvcmFnZVN5bmMiLCJyZXN1bHQiLCJzdGF0dXMiLCJuYXZpZ2F0ZVRvIiwiZmFpbCIsImVycm9yIiwiY29tcGxldGUiLCJzZXRUaW1lb3V0IiwiaGlkZUxvYWRpbmciLCJwb3N0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFrRElBLGNBQVk7QUFDVkMsYUFBUztBQUNUO0FBRlUsRztBQUlaQyxTQUFPLGlCQUFZO0FBQ2pCLFFBQUlDLE9BQU8sSUFBWDtBQUNBQyxPQUFHRixLQUFILENBQVM7QUFDUEcsZUFBUyxpQkFBVUMsSUFBVixFQUFnQjtBQUN2QkgsYUFBS0ksR0FBTCxDQUFTLG9CQUFULEVBQStCLEVBQUNDLE1BQU1GLEtBQUtFLElBQVosRUFBL0IsRUFBa0RDLElBQWxELENBQXVELGdCQUFRO0FBQzdETCxhQUFHTSxjQUFILENBQWtCLFlBQWxCLEVBQWdDSixLQUFLQSxJQUFyQztBQUNELFNBRkQ7QUFHRDtBQUxNLEtBQVQ7QUFPRCxHO0FBQ0RLLFUsc0JBQVc7QUFDVCxTQUFLVCxLQUFMO0FBQ0QsRztBQUNEVSxRLG9CQUFTLENBQ1IsQztBQUNEQyxRLG9CQUFTLENBQ1IsQzs7QUFDREMsV0FBUyxpQkFBVUMsTUFBVixFQUFrQkMsR0FBbEIsRUFBdUJWLElBQXZCLEVBQTZCO0FBQUE7O0FBQ3BDLFdBQU8sSUFBSVcsT0FBSixDQUFZLFVBQUNDLEdBQUQsRUFBTUMsR0FBTixFQUFjO0FBQy9CZixTQUFHZ0IsV0FBSCxDQUFlO0FBQ2JDLGVBQU87QUFETSxPQUFmO0FBR0FqQixTQUFHVSxPQUFILENBQVc7QUFDVEMsZ0JBQVFBLE1BREM7QUFFVE8sZ0JBQVE7QUFDTiw4QkFBb0IsZ0JBRGQ7QUFFTiwwQkFBZ0IsbUNBRlY7QUFHTixtQkFBUyxLQUhIO0FBSU4sbUJBQVNsQixHQUFHbUIsY0FBSCxDQUFrQixZQUFsQjtBQUpILFNBRkM7QUFRVFAsYUFBSyxNQUFLaEIsVUFBTCxDQUFnQkMsT0FBaEIsR0FBMEJlLEdBUnRCO0FBU1RWLGtCQVRTO0FBVVRELGlCQUFTLGlCQUFDbUIsTUFBRCxFQUFZO0FBQ25CLGNBQUlsQixPQUFPa0IsT0FBT2xCLElBQWxCO0FBQ0EsY0FBSUEsS0FBS21CLE1BQUwsSUFBZSxDQUFuQixFQUNFUCxJQUFJTSxPQUFPbEIsSUFBWCxFQURGLEtBRUssSUFBSUEsS0FBS21CLE1BQUwsSUFBZSxDQUFDLEdBQXBCLEVBQXlCO0FBQzVCO0FBQ0FyQixlQUFHc0IsVUFBSCxDQUFjO0FBQ1pWLG1CQUFLO0FBRE8sYUFBZDtBQUdELFdBTEksTUFLRTtBQUNMRyxnQkFBSWIsSUFBSjtBQUNEO0FBQ0YsU0F0QlE7QUF1QlRxQixjQUFNLGNBQUNDLEtBQUQ7QUFBQSxpQkFBV1QsSUFBSVMsS0FBSixDQUFYO0FBQUEsU0F2Qkc7QUF3QlRDLGtCQUFVLG9CQUFNO0FBQ2RDLHFCQUFXO0FBQUEsbUJBQU0xQixHQUFHMkIsV0FBSCxFQUFOO0FBQUEsV0FBWCxFQUFtQyxHQUFuQztBQUNEO0FBMUJRLE9BQVg7QUE0QkQsS0FoQ00sQ0FBUDtBQWlDRCxHO0FBQ0R4QixPQUFLLGFBQVVTLEdBQVYsRUFBMEI7QUFBQSxRQUFYVixJQUFXLHVFQUFKLEVBQUk7O0FBQzdCLFdBQU8sS0FBS1EsT0FBTCxDQUFhLEtBQWIsRUFBb0JFLEdBQXBCLEVBQXlCVixJQUF6QixDQUFQO0FBQ0QsRztBQUNEMEIsUUFBTSxjQUFVaEIsR0FBVixFQUFlVixJQUFmLEVBQXFCO0FBQ3pCLFdBQU8sS0FBS1EsT0FBTCxDQUFhLE1BQWIsRUFBcUJFLEdBQXJCLEVBQTBCVixJQUExQixDQUFQO0FBQ0QiLCJmaWxlIjoiYXBwLnd4YSIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcbiAgICBjb25maWc6IHtcbiAgICAgIHVzaW5nQ29tcG9uZW50czoge1xuICAgICAgICAnbGF5b3V0LWhlYWQnOiAnbGF5b3V0L2hlYWQnLFxuICAgICAgICAvLyAnbGF5b3V0LWZvb3QnOiAnbGF5b3V0L2Zvb3QnXG4gICAgICB9LFxuICAgICAgcGFnZXM6IFtdLFxuICAgICAgd2luZG93OiB7XG4gICAgICAgIGJhY2tncm91bmRUZXh0U3R5bGU6ICdkYXJrJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI2VmZWZlZicsXG4gICAgICAgIG5hdmlnYXRpb25CYXJCYWNrZ3JvdW5kQ29sb3I6ICcjZmZmZmZmJyxcbiAgICAgICAgbmF2aWdhdGlvbkJhclRpdGxlVGV4dDogJ+ebsuS6uuiNnycsXG4gICAgICAgIG5hdmlnYXRpb25CYXJUZXh0U3R5bGU6ICdibGFjaydcbiAgICAgIH0sXG4gICAgICB0YWJCYXI6IHtcbiAgICAgICAgY29sb3I6ICcjOGE4YThhJyxcbiAgICAgICAgc2VsZWN0ZWRDb2xvcjogJyNmZmI0MDAnLFxuICAgICAgICBib3JkZXJTdHlsZTogJ2JsYWNrJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI2ZmZmZmZicsXG4gICAgICAgIGxpc3Q6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBwYWdlUGF0aDogJ3BhZ2VzL2FwcG9pbnRtZW50L2luZGV4JyxcbiAgICAgICAgICAgIGljb25QYXRoOiAnY29tbW9uL2Fzc2V0cy90YWIvMDMucG5nJyxcbiAgICAgICAgICAgIHNlbGVjdGVkSWNvblBhdGg6ICdjb21tb24vYXNzZXRzL3RhYi8wMzEucG5nJyxcbiAgICAgICAgICAgIHRleHQ6ICfpooTnuqYnXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBwYWdlUGF0aDogJ3BhZ2VzL29yZGVyL2luZGV4JyxcbiAgICAgICAgICAgIGljb25QYXRoOiAnY29tbW9uL2Fzc2V0cy90YWIvMDEucG5nJyxcbiAgICAgICAgICAgIHNlbGVjdGVkSWNvblBhdGg6ICdjb21tb24vYXNzZXRzL3RhYi8wMTEucG5nJyxcbiAgICAgICAgICAgIHRleHQ6ICfkubDljZUnXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBwYWdlUGF0aDogJ3BhZ2VzL2NlbnRlci9pbmRleCcsXG4gICAgICAgICAgICBpY29uUGF0aDogJ2NvbW1vbi9hc3NldHMvdGFiLzA0LnBuZycsXG4gICAgICAgICAgICBzZWxlY3RlZEljb25QYXRoOiAnY29tbW9uL2Fzc2V0cy90YWIvMDQxLnBuZycsXG4gICAgICAgICAgICB0ZXh0OiAn5oiR55qEJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgcGFnZVBhdGg6ICdwYWdlcy9hcnRpY2xlL2luZGV4JyxcbiAgICAgICAgICAgIGljb25QYXRoOiAnY29tbW9uL2Fzc2V0cy90YWIvMDIucG5nJyxcbiAgICAgICAgICAgIHNlbGVjdGVkSWNvblBhdGg6ICdjb21tb24vYXNzZXRzL3RhYi8wMjEucG5nJyxcbiAgICAgICAgICAgIHRleHQ6ICflk4HniYwnXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAgbmV0d29ya1RpbWVvdXQ6IHtcbiAgICAgICAgcmVxdWVzdDogMTAwMDBcbiAgICAgIH1cbiAgICB9LFxuICAgIGdsb2JhbERhdGE6IHtcbiAgICAgIGJhc2VVcmw6ICdodHRwczovL3d3dy5tbHhpYW93dS5jb20vJyxcbiAgICAgIC8vIGJhc2VVcmwgOiAnaHR0cDovL2xvY2FsaG9zdC8nLFxuICAgIH0sXG4gICAgbG9naW46IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBzZWxmID0gdGhpc1xuICAgICAgd3gubG9naW4oe1xuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIHNlbGYuZ2V0KCd4Y3hMb2dpbi9hdXRob3JpemUnLCB7Y29kZTogZGF0YS5jb2RlfSkudGhlbihkYXRhID0+IHtcbiAgICAgICAgICAgIHd4LnNldFN0b3JhZ2VTeW5jKCdzZXNzaW9uX2lkJywgZGF0YS5kYXRhKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgIH0sXG4gICAgb25MYXVuY2goKSB7XG4gICAgICB0aGlzLmxvZ2luKClcbiAgICB9LFxuICAgIG9uU2hvdygpIHtcbiAgICB9LFxuICAgIG9uSGlkZSgpIHtcbiAgICB9LFxuICAgIHJlcXVlc3Q6IGZ1bmN0aW9uIChtZXRob2QsIHVybCwgZGF0YSkge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXMsIHJlaikgPT4ge1xuICAgICAgICB3eC5zaG93TG9hZGluZyh7XG4gICAgICAgICAgdGl0bGU6ICfliqDovb3kuK0uLi4nXG4gICAgICAgIH0pXG4gICAgICAgIHd4LnJlcXVlc3Qoe1xuICAgICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICAgIGhlYWRlcjoge1xuICAgICAgICAgICAgJ3gtcmVxdWVzdGVkLXdpdGgnOiAneG1saHR0cHJlcXVlc3QnLFxuICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIixcbiAgICAgICAgICAgICd4LXhjeCc6ICd4Y3gnLFxuICAgICAgICAgICAgJ3Rva2VuJzogd3guZ2V0U3RvcmFnZVN5bmMoJ3Nlc3Npb25faWQnKVxuICAgICAgICAgIH0sXG4gICAgICAgICAgdXJsOiB0aGlzLmdsb2JhbERhdGEuYmFzZVVybCArIHVybCxcbiAgICAgICAgICBkYXRhLFxuICAgICAgICAgIHN1Y2Nlc3M6IChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgIGxldCBkYXRhID0gcmVzdWx0LmRhdGFcbiAgICAgICAgICAgIGlmIChkYXRhLnN0YXR1cyA9PSAxKVxuICAgICAgICAgICAgICByZXMocmVzdWx0LmRhdGEpXG4gICAgICAgICAgICBlbHNlIGlmIChkYXRhLnN0YXR1cyA9PSAtOTk5KSB7XG4gICAgICAgICAgICAgIC8vIOi3s+i9rOWIsOe7keWumumhtVxuICAgICAgICAgICAgICB3eC5uYXZpZ2F0ZVRvKHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvcGFnZXMvYmluZC9pbmRleCdcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlaihkYXRhKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZmFpbDogKGVycm9yKSA9PiByZWooZXJyb3IpLFxuICAgICAgICAgIGNvbXBsZXRlOiAoKSA9PiB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHd4LmhpZGVMb2FkaW5nKCksIDUwMClcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiAodXJsLCBkYXRhID0ge30pIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ0dFVCcsIHVybCwgZGF0YSlcbiAgICB9LFxuICAgIHBvc3Q6IGZ1bmN0aW9uICh1cmwsIGRhdGEpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ1BPU1QnLCB1cmwsIGRhdGEpXG4gICAgfVxuICB9Il19