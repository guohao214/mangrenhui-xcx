'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = App({
  globalData: {
    // baseUrl: 'https://www.mlxiaowu.com/',
    baseUrl: 'http://localhost/'
  },
  login: function login() {
    // return;
    var self = this;
    wx.login({
      success: function success(data) {
        self.get('xcxLogin/authorize', { code: data.code }).then(function (data) {
          wx.setStorageSync('session_id', data.data);
        });
      }
    });
  },
  onLaunch: function onLaunch() {
    this.login();
  },
  onShow: function onShow() {},
  onHide: function onHide() {},

  request: function request(method, url, data) {
    var _this = this;

    return new Promise(function (res, rej) {
      wx.showLoading({
        title: '加载中...'
      });
      wx.request({
        method: method,
        header: {
          'x-requested-with': 'xmlhttprequest',
          "Content-Type": "application/x-www-form-urlencoded",
          'x-xcx': 'xcx',
          'token': wx.getStorageSync('session_id')
        },
        url: _this.globalData.baseUrl + url,
        data: data,
        success: function success(result) {
          var data = result.data;
          if (data.status == 1) res(result.data);else if (data.status == -999) {
            // 跳转到绑定页
            wx.navigateTo({
              url: '/pages/bind/index'
            });
          } else {
            rej(data);
          }
        },
        fail: function fail(error) {
          return rej(error);
        },
        complete: function complete() {
          setTimeout(function () {
            return wx.hideLoading();
          }, 500);
        }
      });
    });
  },
  get: function get(url) {
    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    return this.request('GET', url, data);
  },
  post: function post(url, data) {
    return this.request('POST', url, data);
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC53eGEiXSwibmFtZXMiOlsiZ2xvYmFsRGF0YSIsImJhc2VVcmwiLCJsb2dpbiIsInNlbGYiLCJ3eCIsInN1Y2Nlc3MiLCJkYXRhIiwiZ2V0IiwiY29kZSIsInRoZW4iLCJzZXRTdG9yYWdlU3luYyIsIm9uTGF1bmNoIiwib25TaG93Iiwib25IaWRlIiwicmVxdWVzdCIsIm1ldGhvZCIsInVybCIsIlByb21pc2UiLCJyZXMiLCJyZWoiLCJzaG93TG9hZGluZyIsInRpdGxlIiwiaGVhZGVyIiwiZ2V0U3RvcmFnZVN5bmMiLCJyZXN1bHQiLCJzdGF0dXMiLCJuYXZpZ2F0ZVRvIiwiZmFpbCIsImVycm9yIiwiY29tcGxldGUiLCJzZXRUaW1lb3V0IiwiaGlkZUxvYWRpbmciLCJwb3N0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFrRElBLGNBQVk7QUFDVjtBQUNBQyxhQUFVO0FBRkEsRztBQUlaQyxTQUFPLGlCQUFZO0FBQ2pCO0FBQ0EsUUFBSUMsT0FBTyxJQUFYO0FBQ0FDLE9BQUdGLEtBQUgsQ0FBUztBQUNQRyxlQUFTLGlCQUFVQyxJQUFWLEVBQWdCO0FBQ3ZCSCxhQUFLSSxHQUFMLENBQVMsb0JBQVQsRUFBK0IsRUFBQ0MsTUFBTUYsS0FBS0UsSUFBWixFQUEvQixFQUFrREMsSUFBbEQsQ0FBdUQsZ0JBQVE7QUFDN0RMLGFBQUdNLGNBQUgsQ0FBa0IsWUFBbEIsRUFBZ0NKLEtBQUtBLElBQXJDO0FBQ0QsU0FGRDtBQUdEO0FBTE0sS0FBVDtBQU9ELEc7QUFDREssVSxzQkFBVztBQUNULFNBQUtULEtBQUw7QUFDRCxHO0FBQ0RVLFEsb0JBQVMsQ0FDUixDO0FBQ0RDLFEsb0JBQVMsQ0FDUixDOztBQUNEQyxXQUFTLGlCQUFVQyxNQUFWLEVBQWtCQyxHQUFsQixFQUF1QlYsSUFBdkIsRUFBNkI7QUFBQTs7QUFDcEMsV0FBTyxJQUFJVyxPQUFKLENBQVksVUFBQ0MsR0FBRCxFQUFNQyxHQUFOLEVBQWM7QUFDL0JmLFNBQUdnQixXQUFILENBQWU7QUFDYkMsZUFBTztBQURNLE9BQWY7QUFHQWpCLFNBQUdVLE9BQUgsQ0FBVztBQUNUQyxnQkFBUUEsTUFEQztBQUVUTyxnQkFBUTtBQUNOLDhCQUFvQixnQkFEZDtBQUVOLDBCQUFnQixtQ0FGVjtBQUdOLG1CQUFTLEtBSEg7QUFJTixtQkFBU2xCLEdBQUdtQixjQUFILENBQWtCLFlBQWxCO0FBSkgsU0FGQztBQVFUUCxhQUFLLE1BQUtoQixVQUFMLENBQWdCQyxPQUFoQixHQUEwQmUsR0FSdEI7QUFTVFYsa0JBVFM7QUFVVEQsaUJBQVMsaUJBQUNtQixNQUFELEVBQVk7QUFDbkIsY0FBSWxCLE9BQU9rQixPQUFPbEIsSUFBbEI7QUFDQSxjQUFJQSxLQUFLbUIsTUFBTCxJQUFlLENBQW5CLEVBQ0VQLElBQUlNLE9BQU9sQixJQUFYLEVBREYsS0FFSyxJQUFJQSxLQUFLbUIsTUFBTCxJQUFlLENBQUMsR0FBcEIsRUFBeUI7QUFDNUI7QUFDQXJCLGVBQUdzQixVQUFILENBQWM7QUFDWlYsbUJBQUs7QUFETyxhQUFkO0FBR0QsV0FMSSxNQUtFO0FBQ0xHLGdCQUFJYixJQUFKO0FBQ0Q7QUFDRixTQXRCUTtBQXVCVHFCLGNBQU0sY0FBQ0MsS0FBRDtBQUFBLGlCQUFXVCxJQUFJUyxLQUFKLENBQVg7QUFBQSxTQXZCRztBQXdCVEMsa0JBQVUsb0JBQU07QUFDZEMscUJBQVc7QUFBQSxtQkFBTTFCLEdBQUcyQixXQUFILEVBQU47QUFBQSxXQUFYLEVBQW1DLEdBQW5DO0FBQ0Q7QUExQlEsT0FBWDtBQTRCRCxLQWhDTSxDQUFQO0FBaUNELEc7QUFDRHhCLE9BQUssYUFBVVMsR0FBVixFQUEwQjtBQUFBLFFBQVhWLElBQVcsdUVBQUosRUFBSTs7QUFDN0IsV0FBTyxLQUFLUSxPQUFMLENBQWEsS0FBYixFQUFvQkUsR0FBcEIsRUFBeUJWLElBQXpCLENBQVA7QUFDRCxHO0FBQ0QwQixRQUFNLGNBQVVoQixHQUFWLEVBQWVWLElBQWYsRUFBcUI7QUFDekIsV0FBTyxLQUFLUSxPQUFMLENBQWEsTUFBYixFQUFxQkUsR0FBckIsRUFBMEJWLElBQTFCLENBQVA7QUFDRCIsImZpbGUiOiJhcHAud3hhIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xuICAgIGNvbmZpZzoge1xuICAgICAgdXNpbmdDb21wb25lbnRzOiB7XG4gICAgICAgICdsYXlvdXQtaGVhZCc6ICdsYXlvdXQvaGVhZCcsXG4gICAgICAgIC8vICdsYXlvdXQtZm9vdCc6ICdsYXlvdXQvZm9vdCdcbiAgICAgIH0sXG4gICAgICBwYWdlczogW10sXG4gICAgICB3aW5kb3c6IHtcbiAgICAgICAgYmFja2dyb3VuZFRleHRTdHlsZTogJ2RhcmsnLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZWZlZmVmJyxcbiAgICAgICAgbmF2aWdhdGlvbkJhckJhY2tncm91bmRDb2xvcjogJyNmZmZmZmYnLFxuICAgICAgICBuYXZpZ2F0aW9uQmFyVGl0bGVUZXh0OiAn55uy5Lq66I2fJyxcbiAgICAgICAgbmF2aWdhdGlvbkJhclRleHRTdHlsZTogJ2JsYWNrJ1xuICAgICAgfSxcbiAgICAgIHRhYkJhcjoge1xuICAgICAgICBjb2xvcjogJyM4YThhOGEnLFxuICAgICAgICBzZWxlY3RlZENvbG9yOiAnI2ZmYjQwMCcsXG4gICAgICAgIGJvcmRlclN0eWxlOiAnYmxhY2snLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZmZmZmZmJyxcbiAgICAgICAgbGlzdDogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHBhZ2VQYXRoOiAncGFnZXMvYXJ0aWNsZS9pbmRleCcsXG4gICAgICAgICAgICBpY29uUGF0aDogJ2NvbW1vbi9hc3NldHMvdGFiLzAyLnBuZycsXG4gICAgICAgICAgICBzZWxlY3RlZEljb25QYXRoOiAnY29tbW9uL2Fzc2V0cy90YWIvMDIxLnBuZycsXG4gICAgICAgICAgICB0ZXh0OiAn5ZOB54mMJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgcGFnZVBhdGg6ICdwYWdlcy9hcHBvaW50bWVudC9pbmRleCcsXG4gICAgICAgICAgICBpY29uUGF0aDogJ2NvbW1vbi9hc3NldHMvdGFiLzAzLnBuZycsXG4gICAgICAgICAgICBzZWxlY3RlZEljb25QYXRoOiAnY29tbW9uL2Fzc2V0cy90YWIvMDMxLnBuZycsXG4gICAgICAgICAgICB0ZXh0OiAn6aKE57qmJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgcGFnZVBhdGg6ICdwYWdlcy9wYXkvaW5kZXgnLFxuICAgICAgICAgICAgaWNvblBhdGg6ICdjb21tb24vYXNzZXRzL3RhYi8wMS5wbmcnLFxuICAgICAgICAgICAgc2VsZWN0ZWRJY29uUGF0aDogJ2NvbW1vbi9hc3NldHMvdGFiLzAxMS5wbmcnLFxuICAgICAgICAgICAgdGV4dDogJ+S5sOWNlSdcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHBhZ2VQYXRoOiAncGFnZXMvY2VudGVyL2luZGV4JyxcbiAgICAgICAgICAgIGljb25QYXRoOiAnY29tbW9uL2Fzc2V0cy90YWIvMDQucG5nJyxcbiAgICAgICAgICAgIHNlbGVjdGVkSWNvblBhdGg6ICdjb21tb24vYXNzZXRzL3RhYi8wNDEucG5nJyxcbiAgICAgICAgICAgIHRleHQ6ICfmiJHnmoQnXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAgbmV0d29ya1RpbWVvdXQ6IHtcbiAgICAgICAgcmVxdWVzdDogMTAwMDBcbiAgICAgIH1cbiAgICB9LFxuICAgIGdsb2JhbERhdGE6IHtcbiAgICAgIC8vIGJhc2VVcmw6ICdodHRwczovL3d3dy5tbHhpYW93dS5jb20vJyxcbiAgICAgIGJhc2VVcmwgOiAnaHR0cDovL2xvY2FsaG9zdC8nLFxuICAgIH0sXG4gICAgbG9naW46IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHJldHVybjtcbiAgICAgIGxldCBzZWxmID0gdGhpc1xuICAgICAgd3gubG9naW4oe1xuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIHNlbGYuZ2V0KCd4Y3hMb2dpbi9hdXRob3JpemUnLCB7Y29kZTogZGF0YS5jb2RlfSkudGhlbihkYXRhID0+IHtcbiAgICAgICAgICAgIHd4LnNldFN0b3JhZ2VTeW5jKCdzZXNzaW9uX2lkJywgZGF0YS5kYXRhKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgIH0sXG4gICAgb25MYXVuY2goKSB7XG4gICAgICB0aGlzLmxvZ2luKClcbiAgICB9LFxuICAgIG9uU2hvdygpIHtcbiAgICB9LFxuICAgIG9uSGlkZSgpIHtcbiAgICB9LFxuICAgIHJlcXVlc3Q6IGZ1bmN0aW9uIChtZXRob2QsIHVybCwgZGF0YSkge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXMsIHJlaikgPT4ge1xuICAgICAgICB3eC5zaG93TG9hZGluZyh7XG4gICAgICAgICAgdGl0bGU6ICfliqDovb3kuK0uLi4nXG4gICAgICAgIH0pXG4gICAgICAgIHd4LnJlcXVlc3Qoe1xuICAgICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICAgIGhlYWRlcjoge1xuICAgICAgICAgICAgJ3gtcmVxdWVzdGVkLXdpdGgnOiAneG1saHR0cHJlcXVlc3QnLFxuICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIixcbiAgICAgICAgICAgICd4LXhjeCc6ICd4Y3gnLFxuICAgICAgICAgICAgJ3Rva2VuJzogd3guZ2V0U3RvcmFnZVN5bmMoJ3Nlc3Npb25faWQnKVxuICAgICAgICAgIH0sXG4gICAgICAgICAgdXJsOiB0aGlzLmdsb2JhbERhdGEuYmFzZVVybCArIHVybCxcbiAgICAgICAgICBkYXRhLFxuICAgICAgICAgIHN1Y2Nlc3M6IChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgIGxldCBkYXRhID0gcmVzdWx0LmRhdGFcbiAgICAgICAgICAgIGlmIChkYXRhLnN0YXR1cyA9PSAxKVxuICAgICAgICAgICAgICByZXMocmVzdWx0LmRhdGEpXG4gICAgICAgICAgICBlbHNlIGlmIChkYXRhLnN0YXR1cyA9PSAtOTk5KSB7XG4gICAgICAgICAgICAgIC8vIOi3s+i9rOWIsOe7keWumumhtVxuICAgICAgICAgICAgICB3eC5uYXZpZ2F0ZVRvKHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvcGFnZXMvYmluZC9pbmRleCdcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlaihkYXRhKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZmFpbDogKGVycm9yKSA9PiByZWooZXJyb3IpLFxuICAgICAgICAgIGNvbXBsZXRlOiAoKSA9PiB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHd4LmhpZGVMb2FkaW5nKCksIDUwMClcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiAodXJsLCBkYXRhID0ge30pIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ0dFVCcsIHVybCwgZGF0YSlcbiAgICB9LFxuICAgIHBvc3Q6IGZ1bmN0aW9uICh1cmwsIGRhdGEpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ1BPU1QnLCB1cmwsIGRhdGEpXG4gICAgfVxuICB9Il19